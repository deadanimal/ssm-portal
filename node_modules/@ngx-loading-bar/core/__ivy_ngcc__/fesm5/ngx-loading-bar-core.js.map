{"version":3,"sources":["/Users/syafiqbasri/Development/Project/SIC010/web/node_modules/@ngx-loading-bar/core/fesm5/ngx-loading-bar-core.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCA8LoC,AAE7B;;;;;;;;;;;;;;;;kCAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAsDY,AAa/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACqB;;;;;;KAMvB;;;;;;;;;;;gDAOoB","file":"ngx-loading-bar-core.js","sourcesContent":["import { __assign, __spread, __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Inject, PLATFORM_ID, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Subject, of, timer, combineLatest } from 'rxjs';\nimport { take, map, tap, startWith, switchMap, shareReplay } from 'rxjs/operators';\n\nvar LoadingBarState = /** @class */ (function () {\n    function LoadingBarState(config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        this.config = config;\n        this.state = {\n            action: null,\n            value: 0,\n            initialValue: 0,\n        };\n        this.requests = null;\n        this.disabled = false;\n        this.stream$ = new Subject();\n        this._value$ = null;\n        this.timer$ = function (s) {\n            var state$ = of(s);\n            switch (s.action) {\n                case 'start':\n                case 'increment':\n                case 'set': {\n                    if (s.action === 'start' && _this.config.latencyThreshold === 0 && s.value === 0) {\n                        s.value = s.initialValue;\n                    }\n                    if (_this.requests > 0) {\n                        state$ = timer(_this.config.latencyThreshold, 250).pipe(map(function (t) { return (__assign(__assign({}, s), { value: t === 0 ? _this.state.value || s.initialValue : _this._increment() })); }));\n                    }\n                    break;\n                }\n                case 'complete':\n                case 'stop': {\n                    // Attempt to aggregate any start/complete calls within 500ms:\n                    state$ =\n                        s.value === 0\n                            ? of(__assign({}, s))\n                            : timer(0, 500).pipe(take(2), map(function (t) { return ({ value: t === 0 ? 100 : 0 }); }));\n                    break;\n                }\n            }\n            return state$.pipe(map(function (next) { return (__assign(__assign({}, next), { action: 'set' })); }), tap(function (next) { return _this.next(next, false); }));\n        };\n        this.config = __assign({ latencyThreshold: 0 }, config);\n    }\n    Object.defineProperty(LoadingBarState.prototype, \"value$\", {\n        get: function () {\n            var _this = this;\n            if (this._value$) {\n                return this._value$;\n            }\n            return (this._value$ = this.stream$.asObservable().pipe(startWith(this.state), switchMap(function (s) { return _this.timer$(s); }), shareReplay(), map(function (s) { return s.value; })));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoadingBarState.prototype.start = function (initialValue) {\n        if (initialValue === void 0) { initialValue = 2; }\n        if (this.disabled) {\n            return;\n        }\n        this.next({ action: 'start', initialValue: initialValue });\n    };\n    LoadingBarState.prototype.stop = function () {\n        this.next({ action: 'stop' });\n    };\n    LoadingBarState.prototype.complete = function () {\n        this.next({ action: 'complete' });\n    };\n    LoadingBarState.prototype.disable = function () {\n        this.disabled = true;\n    };\n    LoadingBarState.prototype.set = function (value) {\n        this.next({ action: 'set', value: value });\n    };\n    LoadingBarState.prototype.increment = function (value) {\n        if (value === void 0) { value = 0; }\n        this.next({ action: 'increment', value: value });\n    };\n    LoadingBarState.prototype.next = function (state, emitEvent) {\n        if (emitEvent === void 0) { emitEvent = true; }\n        switch (state.action) {\n            case 'start':\n                this.requests = (this.requests || 0) + 1;\n                break;\n            case 'complete':\n                this.requests = (this.requests || 1) - 1;\n                if (this.requests > 0) {\n                    return;\n                }\n                break;\n            case 'stop':\n                this.requests = 0;\n                break;\n            case 'increment':\n                state.value = this._increment(state.value);\n                break;\n        }\n        this.state = __assign(__assign(__assign({}, this.state), { action: null }), state);\n        if (emitEvent) {\n            this.stream$.next(this.state);\n        }\n    };\n    LoadingBarState.prototype._increment = function (rnd) {\n        if (rnd === void 0) { rnd = 0; }\n        var stat = this.state.value;\n        if (stat >= 99) {\n            rnd = 0;\n        }\n        if (rnd === 0) {\n            if (stat >= 0 && stat < 25) {\n                // Start out between 3 - 6% increments\n                rnd = Math.random() * (5 - 3 + 1) + 3;\n            }\n            else if (stat >= 25 && stat < 65) {\n                // increment between 0 - 3%\n                rnd = Math.random() * 3;\n            }\n            else if (stat >= 65 && stat < 90) {\n                // increment between 0 - 2%\n                rnd = Math.random() * 2;\n            }\n            else if (stat >= 90 && stat < 99) {\n                // finally, increment it .5 %\n                rnd = 0.5;\n            }\n            else {\n                // after 99%, don't increment:\n                rnd = 0;\n            }\n        }\n        return rnd + stat;\n    };\n    return LoadingBarState;\n}());\n\nvar LOADING_BAR_CONFIG = new InjectionToken('LOADING_BAR_CONFIG');\n\nvar LoadingBarService = /** @class */ (function () {\n    function LoadingBarService(platformId, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        this.platformId = platformId;\n        this.config = config;\n        this.refs = {};\n        this.streams$ = new Subject();\n        this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () { return combineLatest.apply(void 0, __spread(Object.keys(_this.refs).map(function (s) { return _this.refs[s].value$; }))); }), map(function (v) { return Math.max.apply(Math, __spread([0], v)); }));\n    }\n    Object.defineProperty(LoadingBarService.prototype, \"progress$\", {\n        /** @deprecated use `value$` instead. */\n        get: function () {\n            return this.value$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated use `useRef` instead. */\n    LoadingBarService.prototype.start = function (initialValue) {\n        if (initialValue === void 0) { initialValue = 2; }\n        this.useRef().start(initialValue);\n    };\n    /** @deprecated use `useRef` instead. */\n    LoadingBarService.prototype.set = function (value) {\n        this.useRef().set(value);\n    };\n    /** @deprecated use `useRef` instead. */\n    LoadingBarService.prototype.increment = function (value) {\n        this.useRef().increment(value);\n    };\n    /** @deprecated use `useRef` instead. */\n    LoadingBarService.prototype.complete = function () {\n        this.useRef().complete();\n    };\n    /** @deprecated use `useRef` instead. */\n    LoadingBarService.prototype.stop = function () {\n        this.useRef().stop();\n    };\n    LoadingBarService.prototype.useRef = function (id) {\n        if (id === void 0) { id = 'default'; }\n        if (!this.refs[id]) {\n            this.refs[id] = new LoadingBarState(this.config);\n            this.streams$.next();\n            if (!isPlatformBrowser(this.platformId)) {\n                this.refs[id].disable();\n            }\n        }\n        return this.refs[id];\n    };\n    LoadingBarService.ctorParameters = function () { return [\n        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOADING_BAR_CONFIG,] }] }\n    ]; };\n    LoadingBarService.ɵprov = ɵɵdefineInjectable({ factory: function LoadingBarService_Factory() { return new LoadingBarService(ɵɵinject(PLATFORM_ID), ɵɵinject(LOADING_BAR_CONFIG, 8)); }, token: LoadingBarService, providedIn: \"root\" });\n    LoadingBarService = __decorate([\n        Injectable({ providedIn: 'root' }),\n        __param(0, Inject(PLATFORM_ID)),\n        __param(1, Optional()), __param(1, Inject(LOADING_BAR_CONFIG)),\n        __metadata(\"design:paramtypes\", [Object, Object])\n    ], LoadingBarService);\n    return LoadingBarService;\n}());\n\nvar LoadingBarComponent = /** @class */ (function () {\n    function LoadingBarComponent(loader) {\n        this.loader = loader;\n        this.includeSpinner = true;\n        this.includeBar = true;\n        this.fixed = true;\n        this.color = '#29d';\n    }\n    Object.defineProperty(LoadingBarComponent.prototype, \"value$\", {\n        get: function () {\n            return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LoadingBarComponent.ctorParameters = function () { return [\n        { type: LoadingBarService }\n    ]; };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LoadingBarComponent.prototype, \"includeSpinner\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LoadingBarComponent.prototype, \"includeBar\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LoadingBarComponent.prototype, \"fixed\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], LoadingBarComponent.prototype, \"color\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number)\n    ], LoadingBarComponent.prototype, \"value\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LoadingBarComponent.prototype, \"ref\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LoadingBarComponent.prototype, \"height\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], LoadingBarComponent.prototype, \"diameter\", void 0);\n    LoadingBarComponent = __decorate([\n        Component({\n            selector: 'ngx-loading-bar',\n            template: \"\\n    <ng-container *ngIf=\\\"value != null ? value : (value$ | async) as progress\\\">\\n      <div *ngIf=\\\"includeSpinner\\\" class=\\\"ngx-spinner\\\">\\n        <div [style.width]=\\\"diameter\\\" [style.height]=\\\"diameter\\\" class=\\\"ngx-spinner-icon\\\"></div>\\n      </div>\\n      <div\\n        *ngIf=\\\"includeBar\\\"\\n        class=\\\"ngx-bar\\\"\\n        [style.background]=\\\"color\\\"\\n        [style.height]=\\\"height\\\"\\n        [style.width]=\\\"progress + '%'\\\"\\n      ></div>\\n    </ng-container>\\n  \",\n            preserveWhitespaces: false,\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            encapsulation: ViewEncapsulation.Emulated,\n            host: {\n                '[attr.fixed]': 'fixed',\n                '[style.color]': 'color',\n            },\n            styles: [\":host{position:relative;display:block;pointer-events:none}:host .ngx-spinner{transition:350ms linear;display:block;position:absolute;top:5px;left:0}:host .ngx-spinner .ngx-spinner-icon{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}:host .ngx-bar{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl] :host .ngx-bar{right:0;left:unset}:host[fixed=true]{z-index:10002}:host[fixed=true] .ngx-bar{position:fixed}:host[fixed=true] .ngx-spinner{position:fixed;top:10px;left:10px}[dir=rtl] :host[fixed=true] .ngx-spinner{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\"]\n        }),\n        __metadata(\"design:paramtypes\", [LoadingBarService])\n    ], LoadingBarComponent);\n    return LoadingBarComponent;\n}());\n\nvar LoadingBarModule = /** @class */ (function () {\n    function LoadingBarModule() {\n    }\n    LoadingBarModule = __decorate([\n        NgModule({\n            imports: [CommonModule],\n            declarations: [LoadingBarComponent],\n            exports: [LoadingBarComponent],\n        })\n    ], LoadingBarModule);\n    return LoadingBarModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { LOADING_BAR_CONFIG, LoadingBarComponent, LoadingBarModule, LoadingBarService };\n"]}