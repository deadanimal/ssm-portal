// tslint:disable-next-line: no-reference
///<reference path="odometer.d.ts" />
import { __decorate } from "tslib";
/**
 * Updated by Marco Trinastich on 03.31.20
 * Created by Jose Andres on 6.15.17
 */
import * as lodash from 'lodash';
import { Component, ViewEncapsulation, Input, ViewChild, ElementRef } from '@angular/core';
import { TmNgOdometerConfig } from './odometer.config';
import { CAR_THEME, DEFAULT_THEME, DIGITAL_THEME, MINIMAL_THEME, PLAZA_THEME, SLOT_MACHINE_THEME, TRAIN_STATION_THEME, } from './themes';
// Tm-Odometer / fixed version of the original HubSpot's Odometer
// https://github.com/HubSpot/odometer
const Odometer = require('tm-odometer');
let TmNgOdometerComponent = class TmNgOdometerComponent {
    constructor() {
        this.config = {};
        this.observable = undefined;
        // Individual configuration attributes
        this.animation = undefined;
        this.format = undefined;
        this.theme = undefined;
        this.value = undefined;
        this.duration = undefined;
        this.auto = undefined;
        // Available themes
        this.themes = [
            'car',
            'default',
            'digital',
            'minimal',
            'plaza',
            'slot-machine',
            'train-station'
        ];
    }
    // Start Odometer
    initOdometer() {
        if (!lodash.isUndefined(this.container)
            && typeof Odometer !== 'undefined') {
            this.odometer = new Odometer({
                el: this.container.nativeElement,
                animation: this.config.animation,
                value: this.config.value,
                duration: this.config.duration,
                format: this.config.format,
                theme: this.config.theme,
            });
            if (!lodash.isUndefined(this.number) && this.config.auto) {
                this.odometer.update(this.number);
            }
        }
    }
    initConfig() {
        this.config = lodash.defaults(this.config, new TmNgOdometerConfig());
        // Animation
        if (!lodash.isUndefined(this.animation)) {
            this.config.animation = this.animation;
        }
        // Format
        if (!lodash.isUndefined(this.format)) {
            this.config.format = this.format;
        }
        // Theme
        if (!lodash.isUndefined(this.theme)) {
            this.config.theme = !lodash.includes(this.themes, this.theme) ? 'default' : this.theme;
        }
        // Value
        if (!lodash.isUndefined(this.value)) {
            this.config.value = this.value;
        }
        // Duration
        if (!lodash.isUndefined(this.duration)) {
            this.config.duration = this.duration;
        }
        // Auto
        if (!lodash.isUndefined(this.auto)) {
            this.config.auto = this.auto;
        }
        // Validate theme. If not part of the
        // available themes array, use the default
        if (!lodash.includes(this.themes, this.config.theme)) {
            this.config.theme = 'default';
        }
    }
    // ***************************************
    //  LIFECYCLES
    // ***************************************
    ngOnInit() {
        // Bind Observable
        if (!lodash.isUndefined(this.observable) && !this.config.auto) {
            this.subscription = this.observable.subscribe((trigger) => {
                if (!lodash.isUndefined(trigger) && trigger) {
                    this.odometer.update(this.number);
                }
            });
        }
        // Apply defaults and
        // individual configurations
        this.initConfig();
    }
    ngOnDestroy() {
        if (!lodash.isUndefined(this.subscription)) {
            this.subscription.unsubscribe();
        }
    }
    ngOnChanges() {
        if (!lodash.isUndefined(this.number) && !lodash.isUndefined(this.odometer) && this.config.auto) {
            this.odometer.update(this.number);
        }
    }
    ngAfterViewInit() {
        this.initOdometer();
    }
};
__decorate([
    ViewChild('container', { read: ElementRef, static: true })
], TmNgOdometerComponent.prototype, "container", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "number", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "config", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "observable", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "animation", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "format", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "theme", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "value", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "duration", void 0);
__decorate([
    Input()
], TmNgOdometerComponent.prototype, "auto", void 0);
TmNgOdometerComponent = __decorate([
    Component({
        // tslint:disable-next-line: component-selector
        selector: 'tm-ng-odometer',
        encapsulation: ViewEncapsulation.None,
        template: `<div #container></div>`,
        styles: [CAR_THEME,
            DEFAULT_THEME,
            DIGITAL_THEME,
            MINIMAL_THEME,
            PLAZA_THEME,
            SLOT_MACHINE_THEME,
            TRAIN_STATION_THEME,
            `
            .odometer,
            .odometer-inside,
            .odometer-digit,
            .odometer-digit-spacer,
            .odometer-digit-inner,
            .odometer-ribbon,
            .odometer-ribbon-inner,
            .odometer-value,
            .odometer-formatting-mark {
                color: inherit;
                font-size: inherit;
                font-family: inherit;
            }
        `]
    })
], TmNgOdometerComponent);
export { TmNgOdometerComponent };
//# sourceMappingURL=data:application/json;base64,