// tslint:disable-next-line: no-reference
///<reference path="odometer.d.ts" />
import { __decorate } from "tslib";
/**
 * Updated by Marco Trinastich on 03.31.20
 * Created by Jose Andres on 6.15.17
 */
import * as lodash from 'lodash';
import { Component, ViewEncapsulation, Input, ViewChild, ElementRef } from '@angular/core';
import { TmNgOdometerConfig } from './odometer.config';
import { CAR_THEME, DEFAULT_THEME, DIGITAL_THEME, MINIMAL_THEME, PLAZA_THEME, SLOT_MACHINE_THEME, TRAIN_STATION_THEME, } from './themes';
// Tm-Odometer / fixed version of the original HubSpot's Odometer
// https://github.com/HubSpot/odometer
var Odometer = require('tm-odometer');
var TmNgOdometerComponent = /** @class */ (function () {
    function TmNgOdometerComponent() {
        this.config = {};
        this.observable = undefined;
        // Individual configuration attributes
        this.animation = undefined;
        this.format = undefined;
        this.theme = undefined;
        this.value = undefined;
        this.duration = undefined;
        this.auto = undefined;
        // Available themes
        this.themes = [
            'car',
            'default',
            'digital',
            'minimal',
            'plaza',
            'slot-machine',
            'train-station'
        ];
    }
    // Start Odometer
    TmNgOdometerComponent.prototype.initOdometer = function () {
        if (!lodash.isUndefined(this.container)
            && typeof Odometer !== 'undefined') {
            this.odometer = new Odometer({
                el: this.container.nativeElement,
                animation: this.config.animation,
                value: this.config.value,
                duration: this.config.duration,
                format: this.config.format,
                theme: this.config.theme,
            });
            if (!lodash.isUndefined(this.number) && this.config.auto) {
                this.odometer.update(this.number);
            }
        }
    };
    TmNgOdometerComponent.prototype.initConfig = function () {
        this.config = lodash.defaults(this.config, new TmNgOdometerConfig());
        // Animation
        if (!lodash.isUndefined(this.animation)) {
            this.config.animation = this.animation;
        }
        // Format
        if (!lodash.isUndefined(this.format)) {
            this.config.format = this.format;
        }
        // Theme
        if (!lodash.isUndefined(this.theme)) {
            this.config.theme = !lodash.includes(this.themes, this.theme) ? 'default' : this.theme;
        }
        // Value
        if (!lodash.isUndefined(this.value)) {
            this.config.value = this.value;
        }
        // Duration
        if (!lodash.isUndefined(this.duration)) {
            this.config.duration = this.duration;
        }
        // Auto
        if (!lodash.isUndefined(this.auto)) {
            this.config.auto = this.auto;
        }
        // Validate theme. If not part of the
        // available themes array, use the default
        if (!lodash.includes(this.themes, this.config.theme)) {
            this.config.theme = 'default';
        }
    };
    // ***************************************
    //  LIFECYCLES
    // ***************************************
    TmNgOdometerComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Bind Observable
        if (!lodash.isUndefined(this.observable) && !this.config.auto) {
            this.subscription = this.observable.subscribe(function (trigger) {
                if (!lodash.isUndefined(trigger) && trigger) {
                    _this.odometer.update(_this.number);
                }
            });
        }
        // Apply defaults and
        // individual configurations
        this.initConfig();
    };
    TmNgOdometerComponent.prototype.ngOnDestroy = function () {
        if (!lodash.isUndefined(this.subscription)) {
            this.subscription.unsubscribe();
        }
    };
    TmNgOdometerComponent.prototype.ngOnChanges = function () {
        if (!lodash.isUndefined(this.number) && !lodash.isUndefined(this.odometer) && this.config.auto) {
            this.odometer.update(this.number);
        }
    };
    TmNgOdometerComponent.prototype.ngAfterViewInit = function () {
        this.initOdometer();
    };
    __decorate([
        ViewChild('container', { read: ElementRef, static: true })
    ], TmNgOdometerComponent.prototype, "container", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "number", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "observable", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "animation", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "value", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "duration", void 0);
    __decorate([
        Input()
    ], TmNgOdometerComponent.prototype, "auto", void 0);
    TmNgOdometerComponent = __decorate([
        Component({
            // tslint:disable-next-line: component-selector
            selector: 'tm-ng-odometer',
            encapsulation: ViewEncapsulation.None,
            template: "<div #container></div>",
            styles: [CAR_THEME,
                DEFAULT_THEME,
                DIGITAL_THEME,
                MINIMAL_THEME,
                PLAZA_THEME,
                SLOT_MACHINE_THEME,
                TRAIN_STATION_THEME,
                "\n            .odometer,\n            .odometer-inside,\n            .odometer-digit,\n            .odometer-digit-spacer,\n            .odometer-digit-inner,\n            .odometer-ribbon,\n            .odometer-ribbon-inner,\n            .odometer-value,\n            .odometer-formatting-mark {\n                color: inherit;\n                font-size: inherit;\n                font-family: inherit;\n            }\n        "]
        })
    ], TmNgOdometerComponent);
    return TmNgOdometerComponent;
}());
export { TmNgOdometerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2RvbWV0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vdG0tbmctb2RvbWV0ZXIvIiwic291cmNlcyI6WyJsaWIvb2RvbWV0ZXIvb2RvbWV0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlDQUF5QztBQUN6QyxxQ0FBcUM7O0FBRXJDOzs7R0FHRztBQUVILE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUNoQixTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBMkIsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRixPQUFPLEVBQ0gsU0FBUyxFQUNULGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLFdBQVcsRUFDWCxrQkFBa0IsRUFDbEIsbUJBQW1CLEdBQ3JCLE1BQU0sVUFBVSxDQUFDO0FBRW5CLGlFQUFpRTtBQUNqRSxzQ0FBc0M7QUFDdEMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBZ0N4QztJQUFBO1FBS2EsV0FBTSxHQUE0QixFQUFFLENBQUM7UUFDckMsZUFBVSxHQUF3QixTQUFTLENBQUM7UUFFckQsc0NBQXNDO1FBQzdCLGNBQVMsR0FBVyxTQUFTLENBQUM7UUFDOUIsV0FBTSxHQUFXLFNBQVMsQ0FBQztRQUMzQixVQUFLLEdBQVcsU0FBUyxDQUFDO1FBQzFCLFVBQUssR0FBVyxTQUFTLENBQUM7UUFDMUIsYUFBUSxHQUFXLFNBQVMsQ0FBQztRQUM3QixTQUFJLEdBQVksU0FBUyxDQUFDO1FBRW5DLG1CQUFtQjtRQUNYLFdBQU0sR0FBa0I7WUFDNUIsS0FBSztZQUNMLFNBQVM7WUFDVCxTQUFTO1lBQ1QsU0FBUztZQUNULE9BQU87WUFDUCxjQUFjO1lBQ2QsZUFBZTtTQUNsQixDQUFDO0lBaUdOLENBQUM7SUEvRkcsaUJB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QUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7NERBQXVCO0lBQ3pFO1FBQVIsS0FBSyxFQUFFO3lEQUFnQjtJQUNmO1FBQVIsS0FBSyxFQUFFO3lEQUFzQztJQUNyQztRQUFSLEtBQUssRUFBRTs2REFBNkM7SUFHNUM7UUFBUixLQUFLLEVBQUU7NERBQStCO0lBQzlCO1FBQVIsS0FBSyxFQUFFO3lEQUE0QjtJQUMzQjtRQUFSLEtBQUssRUFBRTt3REFBMkI7SUFDMUI7UUFBUixLQUFLLEVBQUU7d0RBQTJCO0lBQzFCO1FBQVIsS0FBSyxFQUFFOzJEQUE4QjtJQUM3QjtRQUFSLEtBQUssRUFBRTt1REFBMkI7SUFkMUIscUJBQXFCO1FBOUJqQyxTQUFTLENBQUM7WUFDUCwrQ0FBK0M7WUFDL0MsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtZQXlCckMsUUFBUSxFQUFFLHdCQUF3QjtxQkF2QjlCLFNBQVM7Z0JBQ1QsYUFBYTtnQkFDYixhQUFhO2dCQUNiLGFBQWE7Z0JBQ2IsV0FBVztnQkFDWCxrQkFBa0I7Z0JBQ2xCLG1CQUFtQjtnQkFDbkIsaWJBY0M7U0FHUixDQUFDO09BQ1cscUJBQXFCLENBMEhqQztJQUFELDRCQUFDO0NBQUEsQUExSEQsSUEwSEM7U0ExSFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1yZWZlcmVuY2VcclxuLy8vPHJlZmVyZW5jZSBwYXRoPVwib2RvbWV0ZXIuZC50c1wiIC8+XHJcblxyXG4vKipcclxuICogVXBkYXRlZCBieSBNYXJjbyBUcmluYXN0aWNoIG9uIDAzLjMxLjIwXHJcbiAqIENyZWF0ZWQgYnkgSm9zZSBBbmRyZXMgb24gNi4xNS4xN1xyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdFbmNhcHN1bGF0aW9uLCBJbnB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksXHJcbiAgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE9kb21ldGVyTW9kZWwgfSBmcm9tICcuL29kb21ldGVyLm1vZGVsJztcclxuaW1wb3J0IHsgVG1OZ09kb21ldGVyQ29uZmlnLCBUbU5nT2RvbWV0ZXJDb25maWdNb2RlbCB9IGZyb20gJy4vb2RvbWV0ZXIuY29uZmlnJztcclxuaW1wb3J0IHtcclxuICAgIENBUl9USEVNRSxcclxuICAgIERFRkFVTFRfVEhFTUUsXHJcbiAgICBESUdJVEFMX1RIRU1FLFxyXG4gICAgTUlOSU1BTF9USEVNRSxcclxuICAgIFBMQVpBX1RIRU1FLFxyXG4gICAgU0xPVF9NQUNISU5FX1RIRU1FLFxyXG4gICAgVFJBSU5fU1RBVElPTl9USEVNRSxcclxuIH0gZnJvbSAnLi90aGVtZXMnO1xyXG5cclxuLy8gVG0tT2RvbWV0ZXIgLyBmaXhlZCB2ZXJzaW9uIG9mIHRoZSBvcmlnaW5hbCBIdWJTcG90J3MgT2RvbWV0ZXJcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0h1YlNwb3Qvb2RvbWV0ZXJcclxuY29uc3QgT2RvbWV0ZXIgPSByZXF1aXJlKCd0bS1vZG9tZXRlcicpO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGNvbXBvbmVudC1zZWxlY3RvclxyXG4gICAgc2VsZWN0b3I6ICd0bS1uZy1vZG9tZXRlcicsXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgQ0FSX1RIRU1FLFxyXG4gICAgICAgIERFRkFVTFRfVEhFTUUsXHJcbiAgICAgICAgRElHSVRBTF9USEVNRSxcclxuICAgICAgICBNSU5JTUFMX1RIRU1FLFxyXG4gICAgICAgIFBMQVpBX1RIRU1FLFxyXG4gICAgICAgIFNMT1RfTUFDSElORV9USEVNRSxcclxuICAgICAgICBUUkFJTl9TVEFUSU9OX1RIRU1FLFxyXG4gICAgICAgIGBcclxuICAgICAgICAgICAgLm9kb21ldGVyLFxyXG4gICAgICAgICAgICAub2RvbWV0ZXItaW5zaWRlLFxyXG4gICAgICAgICAgICAub2RvbWV0ZXItZGlnaXQsXHJcbiAgICAgICAgICAgIC5vZG9tZXRlci1kaWdpdC1zcGFjZXIsXHJcbiAgICAgICAgICAgIC5vZG9tZXRlci1kaWdpdC1pbm5lcixcclxuICAgICAgICAgICAgLm9kb21ldGVyLXJpYmJvbixcclxuICAgICAgICAgICAgLm9kb21ldGVyLXJpYmJvbi1pbm5lcixcclxuICAgICAgICAgICAgLm9kb21ldGVyLXZhbHVlLFxyXG4gICAgICAgICAgICAub2RvbWV0ZXItZm9ybWF0dGluZy1tYXJrIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xyXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0O1xyXG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgLFxyXG4gICAgXSxcclxuICAgIHRlbXBsYXRlOiBgPGRpdiAjY29udGFpbmVyPjwvZGl2PmBcclxufSlcclxuZXhwb3J0IGNsYXNzIFRtTmdPZG9tZXRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xyXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgb2RvbWV0ZXI6IE9kb21ldGVyTW9kZWw7XHJcbiAgICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBjb250YWluZXI6IEVsZW1lbnRSZWY7XHJcbiAgICBASW5wdXQoKSBudW1iZXI6IG51bWJlcjsgLy8gUmVxdWlyZWRcclxuICAgIEBJbnB1dCgpIGNvbmZpZzogVG1OZ09kb21ldGVyQ29uZmlnTW9kZWwgPSB7fTtcclxuICAgIEBJbnB1dCgpIG9ic2VydmFibGU6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgLy8gSW5kaXZpZHVhbCBjb25maWd1cmF0aW9uIGF0dHJpYnV0ZXNcclxuICAgIEBJbnB1dCgpIGFuaW1hdGlvbjogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgQElucHV0KCkgZm9ybWF0OiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICBASW5wdXQoKSB0aGVtZTogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG4gICAgQElucHV0KCkgdmFsdWU6IG51bWJlciA9IHVuZGVmaW5lZDtcclxuICAgIEBJbnB1dCgpIGR1cmF0aW9uOiBudW1iZXIgPSB1bmRlZmluZWQ7XHJcbiAgICBASW5wdXQoKSBhdXRvOiBib29sZWFuID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIC8vIEF2YWlsYWJsZSB0aGVtZXNcclxuICAgIHByaXZhdGUgdGhlbWVzOiBBcnJheTxzdHJpbmc+ID0gW1xyXG4gICAgICAgICdjYXInLFxyXG4gICAgICAgICdkZWZhdWx0JyxcclxuICAgICAgICAnZGlnaXRhbCcsXHJcbiAgICAgICAgJ21pbmltYWwnLFxyXG4gICAgICAgICdwbGF6YScsXHJcbiAgICAgICAgJ3Nsb3QtbWFjaGluZScsXHJcbiAgICAgICAgJ3RyYWluLXN0YXRpb24nXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIFN0YXJ0IE9kb21ldGVyXHJcbiAgICBwcml2YXRlIGluaXRPZG9tZXRlcigpIHtcclxuICAgICAgICBpZiAoIWxvZGFzaC5pc1VuZGVmaW5lZCh0aGlzLmNvbnRhaW5lcilcclxuICAgICAgICAgICAgJiYgdHlwZW9mIE9kb21ldGVyICE9PSAndW5kZWZpbmVkJykge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vZG9tZXRlciA9IG5ldyBPZG9tZXRlcih7XHJcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdGhpcy5jb25maWcuYW5pbWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuY29uZmlnLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuY29uZmlnLmR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLmNvbmZpZy5mb3JtYXQsXHJcbiAgICAgICAgICAgICAgICB0aGVtZTogdGhpcy5jb25maWcudGhlbWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFsb2Rhc2guaXNVbmRlZmluZWQodGhpcy5udW1iZXIpICYmIHRoaXMuY29uZmlnLmF1dG8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2RvbWV0ZXIudXBkYXRlKHRoaXMubnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRDb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBsb2Rhc2guZGVmYXVsdHModGhpcy5jb25maWcsIG5ldyBUbU5nT2RvbWV0ZXJDb25maWcoKSk7XHJcblxyXG4gICAgICAgIC8vIEFuaW1hdGlvblxyXG4gICAgICAgIGlmICghbG9kYXNoLmlzVW5kZWZpbmVkKHRoaXMuYW5pbWF0aW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZvcm1hdFxyXG4gICAgICAgIGlmICghbG9kYXNoLmlzVW5kZWZpbmVkKHRoaXMuZm9ybWF0KSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5mb3JtYXQgPSB0aGlzLmZvcm1hdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZW1lXHJcbiAgICAgICAgaWYgKCFsb2Rhc2guaXNVbmRlZmluZWQodGhpcy50aGVtZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcudGhlbWUgPSAhbG9kYXNoLmluY2x1ZGVzKHRoaXMudGhlbWVzLCB0aGlzLnRoZW1lKSA/ICdkZWZhdWx0JyA6IHRoaXMudGhlbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWx1ZVxyXG4gICAgICAgIGlmICghbG9kYXNoLmlzVW5kZWZpbmVkKHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIER1cmF0aW9uXHJcbiAgICAgICAgaWYgKCFsb2Rhc2guaXNVbmRlZmluZWQodGhpcy5kdXJhdGlvbikpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXV0b1xyXG4gICAgICAgIGlmICghbG9kYXNoLmlzVW5kZWZpbmVkKHRoaXMuYXV0bykpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuYXV0byA9IHRoaXMuYXV0bztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZW1lLiBJZiBub3QgcGFydCBvZiB0aGVcclxuICAgICAgICAvLyBhdmFpbGFibGUgdGhlbWVzIGFycmF5LCB1c2UgdGhlIGRlZmF1bHRcclxuICAgICAgICBpZiAoIWxvZGFzaC5pbmNsdWRlcyh0aGlzLnRoZW1lcywgdGhpcy5jb25maWcudGhlbWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnRoZW1lID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIC8vICBMSUZFQ1lDTEVTXHJcbiAgICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgICAgIC8vIEJpbmQgT2JzZXJ2YWJsZVxyXG4gICAgICAgIGlmICghbG9kYXNoLmlzVW5kZWZpbmVkKHRoaXMub2JzZXJ2YWJsZSkgJiYgIXRoaXMuY29uZmlnLmF1dG8pIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLm9ic2VydmFibGUuc3Vic2NyaWJlKCh0cmlnZ2VyOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxvZGFzaC5pc1VuZGVmaW5lZCh0cmlnZ2VyKSAmJiB0cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZG9tZXRlci51cGRhdGUodGhpcy5udW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFwcGx5IGRlZmF1bHRzIGFuZFxyXG4gICAgICAgIC8vIGluZGl2aWR1YWwgY29uZmlndXJhdGlvbnNcclxuICAgICAgICB0aGlzLmluaXRDb25maWcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKCFsb2Rhc2guaXNVbmRlZmluZWQodGhpcy5zdWJzY3JpcHRpb24pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcygpIHtcclxuICAgICAgICBpZiAoIWxvZGFzaC5pc1VuZGVmaW5lZCh0aGlzLm51bWJlcikgJiYgIWxvZGFzaC5pc1VuZGVmaW5lZCh0aGlzLm9kb21ldGVyKSAmJiB0aGlzLmNvbmZpZy5hdXRvKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2RvbWV0ZXIudXBkYXRlKHRoaXMubnVtYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmluaXRPZG9tZXRlcigpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==